'''
Author: chasey melancholycy@gmail.com
Date: 2025-02-19 12:08:11
FilePath: /utils_ws/test/pythonTest/visKinPath.py
Description: 

Copyright (c) 2025 by chasey (melancholycy@gmail.com), All Rights Reserved. 
'''
import numpy as np
import matplotlib.pyplot as plt

# 定义点的数据
#NOTE: points1  enough sample point and equal weight of heur_cost and extend_cost  
# points = [
#     (0.0, 0.0, 0.0),
#     (0.970294, 0.196686, 0.499995),
#     (1.62848, 0.556251, 0.49999),
#     (2.38571, 1.19404, 0.999985),
#     (2.79094, 1.82513, 0.99998),
#     (3.19618, 2.45623, 0.999975),
#     (3.73651, 3.29768, 0.99997),
#     (4.27684, 4.13914, 0.999965),
#     (4.81717, 4.98059, 0.99996),
#     (5.35751, 5.82204, 0.999955),
#     (5.89785, 6.66348, 0.99995),
#     (6.30311, 7.29456, 0.999945),
#     (6.84346, 8.136, 0.99994),
#     (7.53327, 8.84616, 0.499935),
#     (8.19148, 9.20569, 0.49993),
#     (9.06909, 9.68505, 0.499925),
#     (10.0149, 9.97755, -8e-05)
# ]

# #NOTE: points2 ##############################################
# # points = [
# #     (0, 0, 0),
# #     (0.5, -1e-06, -5e-06),
# #     (1.5, -8e-06, -1e-05),
# #     (2.5, -2e-05, -1.5e-05),
# #     (3.5, -3.7e-05, -2e-05),
# #     (3.5, -3.7e-05, 0.999975),
# #     (4.04033, 0.841419, 0.99997),
# #     (4.58065, 1.68287, 0.999965),
# #     (5.12099, 2.52432, 0.99996),
# #     (5.66133, 3.36577, 0.999955),
# #     (6.20167, 4.20722, 0.99995),
# #     (6.74201, 5.04866, 0.999945),
# #     (7.28236, 5.8901, 0.99994),
# #     (7.82272, 6.73154, 0.999935),
# #     (8.36308, 7.57297, 0.99993),
# #     (8.90344, 8.41441, 0.999925),
# #     (9.44381, 9.25583, 0.99992),
# #     (9.98418, 10.0973, 0.999915),
# # ]

# #NOTE: points.  enough sample point and give high weight of heur_cost   
# # points = [
# #     (0, 0, 0),
# #     (0.752929, 0.515105, 1.5),
# #     (1.18859, 1.37106, 0.49999),
# #     (1.94582, 2.00885, 0.999985),
# #     (2.63559, 2.71904, 0.49998),
# #     (3.39282, 3.35682, 0.999975),
# #     (4.08259, 4.067, 0.49997),
# #     (4.83983, 4.70477, 0.999965),
# #     (5.52962, 5.41495, 0.49996),
# #     (6.28686, 6.05271, 0.999955),
# #     (6.97665, 6.76288, 0.49995),
# #     (7.7339, 7.40063, 0.999945),
# #     (8.4237, 8.1108, 0.49994),
# #     (9.18095, 8.74854, 0.999935),
# #     (9.72131, 9.58998, 0.99993),
# #     (9.99149, 10.0107, 0.999925)
# # ]

# # NOTE: points. se2Dist and weight 1:2 12s-plantime
# # points = [
# #     (0, 0, 0),
# #     (1, -2e-06, -5e-06),
# #     (2, -9e-06, -1e-05),
# #     (3, -2.1e-05, -1.5e-05),
# #     (3.25, -2.525e-05, -2e-05),
# #     (4.2203, 0.196642, 0.499975),
# #     (5.09789, 0.676044, 0.49997),
# #     (5.97549, 1.15544, 0.499965),
# #     (6.85309, 1.63483, 0.49996),
# #     (7.73069, 2.11422, 0.499955),
# #     (8.6083, 2.59361, 0.49995),
# #     (9.0471, 2.8333, 0.499945),
# #     (9.80436, 3.47105, 0.99994),
# #     (10.3447, 4.31249, 0.999935),
# #     (10.8851, 5.15392, 0.99993),
# #     (11.0202, 5.36428, 0.999925),
# #     (11.379, 6.287, 1.49992),
# #     (11.4498, 7.28448, 1.49992),
# #     (11.3223, 8.26627, 1.99991),
# #     (11.0103, 8.94827, 1.99991),
# #     (10.4277, 9.74877, 2.4999),
# #     (10.0272, 10.048, 2.4999)
# # ]

# # NOTE: 
# #  double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
# #      return ((ext - goal).topRows(2).norm() * 5 + abs(ext(2) - goal(2)));
# #    }
# #
# #
# # points = [
# #     (0, 0, 0),
# #     (1, -2e-06, -5e-06),
# #     (2, -9e-06, -1e-05),
# #     (3, -2.1e-05, -1.5e-05),
# #     (4, -3.8e-05, -2e-05),
# #     (5, -6e-05, -2.5e-05),
# #     (6, -8.7e-05, -3e-05),
# #     (7, -0.000119, -3.5e-05),
# #     (7.9703, 0.196533, 0.49996),
# #     (8.8479, 0.675922, 0.499955),
# #     (9.72551, 1.15531, 0.49995),
# #     (10.6031, 1.63469, 0.499945),
# #     (11.4807, 2.11406, 0.49994),
# #     (12.238, 2.75181, 0.999935),
# #     (12.7783, 3.59324, 0.99993),
# #     (13.3187, 4.43468, 0.999925),
# #     (13.8591, 5.2761, 0.99992),
# #     (14.2179, 6.19882, 1.49992),
# #     (14.2887, 7.19631, 1.49991),
# #     (14.3595, 8.1938, 1.49991),
# #     (14.2321, 9.17559, 1.9999),
# #     (13.816, 10.0849, 1.9999),
# #     (13.2335, 10.8854, 2.49989),
# #     (12.4324, 11.484, 2.49989),
# #     (11.5374, 11.9072, 2.99988),
# #     (10.549, 11.8495, 3.49988),
# #     (9.70934, 11.3251, 3.99987),
# #     (9.21903, 10.7576, 3.99987),
# #     (9.21903, 10.7576, 1.99986),
# #     (9.21903, 10.7576, -0.000145),
# #     (9.97188, 10.2423, -1.50015),
# #     (9.98953, 9.99296, -1.50015)
# # ]


# #
# """
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return ((cur - ext).topRows(2).norm() + abs(diff));  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 2 + abs(diff);
#     }


#     vtemp:
# 0 0.5 1 1.5 2 
# wtemp:
# -4.00001 -3.00001 -2.00001 -1.00001 -1e-05 0.99999 1.99999 2.99999 3.99999 
# AT_GOAL
# [INFO] [1739972583.148914722] [utils_node]: AStar Time cost: 36.655182 ms
# """
# # points = [
# #     (0, 0, 0),
# #     (1, -2e-06, -5e-06),
# #     (2, -9e-06, -1e-05),
# #     (3, -2.1e-05, -1.5e-05),
# #     (3.25, -2.525e-05, -2e-05),
# #     (4.2203, 0.196642, 0.499975),
# #     (5.09789, 0.676044, 0.49997),
# #     (5.97549, 1.15544, 0.499965),
# #     (6.85309, 1.63483, 0.49996),
# #     (7.73069, 2.11422, 0.499955),
# #     (8.6083, 2.59361, 0.49995),
# #     (9.0471, 2.8333, 0.499945),
# #     (9.80436, 3.47105, 0.99994),
# #     (10.3447, 4.31249, 0.999935),
# #     (10.8851, 5.15392, 0.99993),
# #     (11.2903, 5.78499, 0.999925),
# #     (11.6492, 6.70771, 1.49992),
# #     (11.7023, 7.45583, 1.49992),
# #     (11.5748, 8.43762, 1.99991),
# #     (11.4708, 8.66495, 1.99991),
# #     (10.8882, 9.46544, 2.4999),
# #     (10.4877, 9.76472, 2.4999),
# #     (10.0402, 9.97632, 2.99989),
# # ]



# """
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return ((cur - ext).topRows(2).norm() + abs(diff) * 0.5);  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 2 + abs(diff) * 0.0;
#     }

#     AStar Time cost: 1.064664 ms
# """
# # points = [
# #         (0, 0, 0),
# #         (0.970294, 0.196686, 0.499995),
# #         (1.84788, 0.676106, 0.49999),
# #         (2.72547, 1.15552, 0.499985),
# #         (3.60306, 1.63493, 0.49998),
# #         (4.48065, 2.11434, 0.499975),
# #         (5.35825, 2.59374, 0.49997),
# #         (6.23585, 3.07314, 0.499965),
# #         (7.11345, 3.55253, 0.49996),
# #         (7.99105, 4.03192, 0.499955),
# #         (8.74829, 4.66968, 0.99995),
# #         (9.28864, 5.51112, 0.999945),
# #         (9.82899, 6.35256, 0.99994),
# #         (10.3693, 7.194, 0.999935),
# #         (10.7282, 8.11672, 1.49993),
# #         (10.6007, 9.0985, 1.99993),
# #         (10.1846, 10.0078, 1.99992),
# #         (10.1846, 10.0078, 2.49992),
# #         (10.1846, 10.0078, 2.99991),
# #         (9.93709, 10.0431, 2.99991),
# # ]


# """


# """
# points = [
#         (0, 0, 0),
#         (0, 0, 0.499995),
#         (0.658189, 0.359565, 0.49999),
#         (1.53578, 0.83898, 0.499985),
#         (2.41337, 1.31839, 0.49998),
#         (3.29096, 1.7978, 0.499975),
#         (4.16856, 2.2772, 0.49997),
#         (5.04615, 2.7566, 0.499965),
#         (5.61408, 3.23492, 0.99996),
#         (6.15442, 4.07637, 0.999955),
#         (6.69476, 4.91781, 0.99995),
#         (7.23511, 5.75926, 0.999945),
#         (7.77546, 6.6007, 0.99994),
#         (8.31581, 7.44213, 0.999935),
#         (8.85617, 8.28357, 0.99993),
#         (9.39654, 9.125, 0.999925),
#         (9.9369, 9.96643, 0.99992),
# ]

# """
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return (cur - ext).topRows(2).norm() + abs(diff) * 0.0;  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 2 + abs(diff) * 0.0;
#     }


#      [utils_node]: AStar Time cost: 51.379013 ms
# """

# points = [
#         (0, 0, 0),
#         (0.752929, 0.515105, 1.5),
#         (1.32001, 1.2297, -1e-05),
#         (2.07294, 1.7448, 1.49999),
#         (2.64003, 2.4594, -2e-05),
#         (3.39297, 2.97449, 1.49998),
#         (3.96007, 3.68908, -3e-05),
#         (4.71301, 4.20416, 1.49997),
#         (5.28011, 4.91874, -4e-05),
#         (6.03306, 5.43381, 1.49996),
#         (6.60017, 6.14839, -5e-05),
#         (7.35313, 6.66346, 1.49995),
#         (7.92024, 7.37803, -6e-05),
#         (8.51046, 7.98567, 1.99994),
#         (8.81747, 8.77519, -7e-05),
#         (9.4077, 9.38282, 1.99993),
#         (9.63797, 9.97496, -8e-05),
#         (9.85913, 10.0684, 0.999915),
#         (9.85913, 10.0684, -1.00009),
#         (9.85913, 10.0684, -3.00009),
#         (9.85913, 10.0684, 1.28309),
#         (9.85913, 10.0684, -0.71692),
#         (9.85913, 10.0684, -2.71692),
#         (9.85913, 10.0684, 1.56626),
#         (9.85913, 10.0684, -0.433749),
#         (9.85913, 10.0684, -2.43375),
#         (9.85913, 10.0684, 1.84943),
#         (9.85913, 10.0684, -0.150579),
#         (9.85913, 10.0684, -2.15058),
#         (9.85913, 10.0684, 2.1326),
#         (9.85913, 10.0684, 0.132591),
#         (9.85913, 10.0684, -1.86741),
#         (9.85913, 10.0684, 2.41577),
#         (9.85913, 10.0684, 0.415762),
#         (9.85913, 10.0684, -1.58424),
#         (9.85913, 10.0684, 2.69894),
#         (9.85913, 10.0684, 0.698932),
#         (9.85913, 10.0684, -1.30107),
#         (9.85913, 10.0684, 2.98211),
#         (9.85913, 10.0684, 0.982102),
#         (9.85913, 10.0684, -1.0179),
#         (9.85913, 10.0684, -3.01791),
#         (9.85913, 10.0684, 1.26527),
#         (9.85913, 10.0684, -0.734733),
#         (9.85913, 10.0684, -2.73474),
#         (9.85913, 10.0684, 1.54844),
#         (9.85913, 10.0684, -0.451562),
#         (9.85913, 10.0684, -2.45157),
#         (9.85913, 10.0684, 1.83161),
#         (9.85913, 10.0684, -0.168392),
#         (9.85913, 10.0684, -2.1684),
#         (9.85913, 10.0684, 2.11478),
#         (9.85913, 10.0684, 0.114778),
#         (9.85913, 10.0684, -1.88523),
#         (9.85913, 10.0684, 2.39795),
#         (9.85913, 10.0684, 0.397949),
#         (9.85913, 10.0684, -1.60206),
#         (9.85913, 10.0684, 2.68112),
#         (9.85913, 10.0684, 0.681119),
#         (9.85913, 10.0684, -1.31889),
#         (9.85913, 10.0684, 2.96429),
#         (9.85913, 10.0684, 0.964289),
#         (9.85913, 10.0684, -1.03572),
#         (9.85913, 10.0684, -3.03572),
#         (9.85913, 10.0684, 1.24746),
#         (9.85913, 10.0684, -0.752545),
#         (9.85913, 10.0684, -1.25255),
#         (10.0496, 9.97584, 0.747445),
# ]



# """
    
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return (cur - ext).topRows(2).norm() + abs(diff) * 0.5;  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 2 + abs(diff) * 0.5;
#     }

# """
# points = [
#         (0, 0, 0),
#         (1, -2e-06, -5e-06),
#         (2, -9e-06, -1e-05),
#         (3, -2.1e-05, -1.5e-05),
#         (3.25, -2.525e-05, -2e-05),
#         (4.2203, 0.196642, 0.499975),
#         (5.09789, 0.676044, 0.49997),
#         (5.97549, 1.15544, 0.499965),
#         (6.85309, 1.63483, 0.49996),
#         (7.73069, 2.11422, 0.499955),
#         (8.6083, 2.59361, 0.49995),
#         (9.0471, 2.8333, 0.499945),
#         (9.80436, 3.47105, 0.99994),
#         (10.3447, 4.31249, 0.999935),
#         (10.8851, 5.15392, 0.99993),
#         (11.2903, 5.78499, 0.999925),
#         (11.6492, 6.70771, 1.49992),
#         (11.72, 7.7052, 1.49992),
#         (11.7377, 7.95457, 1.49991),
#         (11.6102, 8.93636, 1.99991),
#         (11.0277, 9.73685, 2.4999),
#         (10.6271, 10.0361, 2.4999),
#         (9.99973, 9.93598, -1.7833),
# ]



# """

#     //#PART:2
#     // distance
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       return (cur - ext).norm();  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       return (ext - goal).norm() * 2;
#     }

#  AStar Time cost: 430.734177 ms
# """
# points = [
#         (0, 0, 0),
#         (0.970294, 0.196686, 0.499995),
#         (1.84788, 0.676106, 0.49999),
#         (2.72547, 1.15552, 0.499985),
#         (3.60306, 1.63493, 0.49998),
#         (4.48065, 2.11434, 0.499975),
#         (5.35825, 2.59374, 0.49997),
#         (6.23585, 3.07314, 0.499965),
#         (7.11345, 3.55253, 0.49996),
#         (7.99105, 4.03192, 0.499955),
#         (8.74829, 4.66968, 0.99995),
#         (9.28864, 5.51112, 0.999945),
#         (9.82899, 6.35256, 0.99994),
#         (10.1878, 7.27528, 1.49994),
#         (10.2232, 7.77403, 1.49993),
#         (10.0957, 8.75581, 1.99993),
#         (9.92706, 9.47893, 1.49992),
#         (10.0595, 9.95589, 0.999915),
# ]


# """
#     //#PART:2
#     // distance
#     // double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#     //   return (cur - ext).norm();  
#     // }
#     // double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#     //   return (ext - goal).norm() * 1.1;
#     // }
# """

# points = [
#         (0, 0, 0),
#         (0.727721, 0.147515, 0.499995),
#         (1.60531, 0.626934, 0.49999),
#         (2.48289, 1.10635, 0.499985),
#         (3.36049, 1.58576, 0.49998),
#         (4.11772, 2.22354, 0.999975),
#         (4.65804, 3.06499, 0.99997),
#         (5.19837, 3.90645, 0.999965),
#         (5.7387, 4.7479, 0.99996),
#         (6.27904, 5.58935, 0.999955),
#         (6.81938, 6.43079, 0.99995),
#         (7.35973, 7.27223, 0.999945),
#         (7.90008, 8.11368, 0.99994),
#         (8.44043, 8.95511, 0.999935),
#         (9.13024, 9.66527, 0.49993),
#         (10.0761, 9.95777, -7.5e-05),
# ]



# """
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return (cur - ext).topRows(2).norm() + abs(diff) * 2;  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 1.1 + abs(diff) * 0.0;
#     }
# """
# points = [
#         (0, 0, 0),
#         (0, 0, 0.499995),
#         (0.877586, 0.479419, 0.49999),
#         (1.75517, 0.958834, 0.499985),
#         (2.63276, 1.43825, 0.49998),
#         (3.51036, 1.91765, 0.499975),
#         (4.38795, 2.39705, 0.49997),
#         (4.82675, 2.63675, 0.499965),
#         (5.58399, 3.27452, 0.99996),
#         (6.12433, 4.11597, 0.999955),
#         (6.66467, 4.95741, 0.99995),
#         (7.20502, 5.79885, 0.999945),
#         (7.74537, 6.64029, 0.99994),
#         (8.28572, 7.48173, 0.999935),
#         (8.82608, 8.32317, 0.99993),
#         (9.36644, 9.1646, 0.999925),
#         (9.90681, 10.006, 0.99992),
# ]

# """
#     //PART: 1 //# se2 distance
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return (cur - ext).topRows(2).norm() + abs(diff) * 0.5;  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 1.1 + abs(diff) * 0.0;
#     }

# [utils_node]: AStar Time cost: 0.419465 ms
# """

# points = [
#         (0, 0, 0),
#         (0, 0, 0.499995),
#         (0.877586, 0.479419, 0.49999),
#         (1.75517, 0.958834, 0.499985),
#         (2.63276, 1.43825, 0.49998),
#         (3.51036, 1.91765, 0.499975),
#         (3.72976, 2.0375, 0.49997),
#         (4.48699, 2.67527, 0.999965),
#         (5.02733, 3.51672, 0.99996),
#         (5.56766, 4.35817, 0.999955),
#         (6.10801, 5.19962, 0.99995),
#         (6.64835, 6.04106, 0.999945),
#         (7.1887, 6.8825, 0.99994),
#         (7.72906, 7.72394, 0.999935),
#         (8.26942, 8.56537, 0.99993),
#         (8.40451, 8.77573, 0.999925),
#         (9.09432, 9.48588, 0.49992),
#         (9.97194, 9.96523, 0.499915),
# ]


# """

#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return (cur - ext).topRows(2).norm() + abs(diff) * 0.25;  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 1.1 + abs(diff) * 0.0;
#     }

# [utils_node]: AStar Time cost: 0.264426 ms
# """

# points = [
#         (0, 0, 0),
#         (0, 0, 0.499995),
#         (0.877586, 0.479419, 0.49999),
#         (1.75517, 0.958834, 0.499985),
#         (2.63276, 1.43825, 0.49998),
#         (3.51036, 1.91765, 0.499975),
#         (3.72976, 2.0375, 0.49997),
#         (4.48699, 2.67527, 0.999965),
#         (5.02733, 3.51672, 0.99996),
#         (5.56766, 4.35817, 0.999955),
#         (6.10801, 5.19962, 0.99995),
#         (6.64835, 6.04106, 0.999945),
#         (7.1887, 6.8825, 0.99994),
#         (7.72906, 7.72394, 0.999935),
#         (8.26942, 8.56537, 0.99993),
#         (8.40451, 8.77573, 0.999925),
#         (9.09432, 9.48588, 0.49992),
#         (9.97194, 9.96523, 0.499915),
# ]


# """
#     //PART: 1 //# se2 distance
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return (cur - ext).topRows(2).norm() + abs(diff) * 0.0;  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 1.1 + abs(diff) * 0.0;
#     }

#      AStar Time cost: 114.077619 ms
# """
# points = [
#         (0, 0, 0),
#         (0.590187, 0.607677, 2),
#         (0.743667, 1.00244, -1e-05),
#         (1.33386, 1.61011, 1.99999),
#         (1.33386, 1.61011, -2e-05),
#         (1.92406, 2.21778, 1.99998),
#         (1.92406, 2.21778, -3e-05),
#         (2.51426, 2.82544, 1.99996),
#         (2.51426, 2.82544, -4e-05),
#         (3.10448, 3.43309, 1.99995),
#         (3.10448, 3.43309, -5e-05),
#         (3.69469, 4.04074, 1.99994),
#         (3.69469, 4.04074, -6e-05),
#         (4.28492, 4.64838, 1.99993),
#         (4.28492, 4.64838, -7e-05),
#         (4.87515, 5.25602, 1.99992),
#         (4.87515, 5.25602, -8e-05),
#         (5.46538, 5.86365, 1.99991),
#         (5.46538, 5.86365, -9e-05),
#         (6.05562, 6.47127, 1.9999),
#         (6.05562, 6.47127, -0.0001),
#         (6.64587, 7.07889, 1.99989),
#         (6.64587, 7.07889, -0.00011),
#         (7.39886, 7.59391, 1.49988),
#         (8.04682, 8.13955, -0.50012),
#         (8.04682, 8.13955, -0.000125),
#         (8.63709, 8.74716, 1.99987),
#         (8.63709, 8.74716, -0.000135),
#         (9.22736, 9.35475, 1.99986),
#         (9.22736, 9.35475, -0.000145),
#         (9.79211, 9.741, 1.49985),
#         (9.79211, 9.741, 0.499845),
#         (9.94139, 9.92906, 1.49984),
# ]



# """
#     double getExtendCost(const utils::SE2Type& cur, const utils::SE2Type& ext) override{
#       auto diff = cur(2) - ext(2);
#       utils::normAngle(diff);
#       return (cur - ext).topRows(2).norm() + abs(diff) * 0.1;  
#     }
#     double getHeuristicCost(const utils::SE2Type& ext, const utils::SE2Type& goal) override{
#       auto diff = ext(2) - goal(2);
#       utils::normAngle(diff);
#       return (ext - goal).topRows(2).norm() * 1.1 + abs(diff) * 0.0;
#     }


#     [utils_node]: AStar Time cost: 0.216985 ms

# """
# points = [
#         (0, 0, 0),
#         (0, 0, 0.499995),
#         (0.877586, 0.479419, 0.49999),
#         (1.75517, 0.958834, 0.499985),
#         (2.5124, 1.59662, 0.99998),
#         (3.05272, 2.43807, 0.999975),
#         (3.59305, 3.27953, 0.99997),
#         (4.13338, 4.12098, 0.999965),
#         (4.67371, 4.96244, 0.99996),
#         (5.21405, 5.80388, 0.999955),
#         (5.75439, 6.64533, 0.99995),
#         (6.44418, 7.3555, 0.499945),
#         (7.32179, 7.83487, 0.49994),
#         (8.19941, 8.31424, 0.499935),
#         (8.95667, 8.95199, 0.99993),
#         (9.22685, 9.3727, 0.999925),
#         (9.74421, 9.90531, 0.49992),
#         (9.96361, 10.0252, 0.499915),
# ]


# """
# """
# points = [
#         (0, 0, 0),
#         (0, 0, 0.499995),
#         (0.877586, 0.479419, 0.49999),
#         (1.75517, 0.958834, 0.499985),
#         (2.5124, 1.59662, 0.99998),
#         (3.05272, 2.43807, 0.999975),
#         (3.59305, 3.27953, 0.99997),
#         (4.13338, 4.12098, 0.999965),
#         (4.67371, 4.96244, 0.99996),
#         (5.21405, 5.80388, 0.999955),
#         (5.75439, 6.64533, 0.99995),
#         (6.44418, 7.3555, 0.499945),
#         (7.32179, 7.83487, 0.49994),
#         (8.19941, 8.31424, 0.499935),
#         (8.95667, 8.95199, 0.99993),
#         (9.22685, 9.3727, 0.999925),
#         (9.74421, 9.90531, 0.49992),
#         (9.96361, 10.0252, 0.499915),
# ]



# """
# """

points = [
        (0, 0, 0),
        (0, 0, 0.499995),
        (0.877586, 0.479419, 0.49999),
        (1.75517, 0.958834, 0.499985),
        (2.5124, 1.59662, 0.99998),
        (3.05272, 2.43807, 0.999975),
        (3.59305, 3.27953, 0.99997),
        (4.13338, 4.12098, 0.999965),
        (4.67371, 4.96244, 0.99996),
        (5.21405, 5.80388, 0.999955),
        (5.75439, 6.64533, 0.99995),
        (6.44418, 7.3555, 0.499945),
        (7.32179, 7.83487, 0.49994),
        (8.19941, 8.31424, 0.499935),
        (8.95667, 8.95199, 0.99993),
        (9.22685, 9.3727, 0.999925),
        (9.74421, 9.90531, 0.49992),
        (9.96361, 10.0252, 0.499915),
]

points = [
        (0, 0, 0),
        (0.884635, 0.374016, 0.999995),
        (1.42494, 1.21548, 0.99999),
        (1.96526, 2.05695, 0.999985),
        (2.50557, 2.89841, 0.99998),
        (3.04589, 3.73987, 0.999975),
        (3.58622, 4.58132, 0.99997),
        (4.12655, 5.42278, 0.999965),
        (4.66688, 6.26423, 0.99996),
        (5.20722, 7.10568, 0.999955),
        (5.47739, 7.5264, 0.99995),
        (6.01774, 8.36784, 0.999945),
        (6.81046, 8.91011, -6e-05),
        (7.81046, 8.91005, -6.5e-05),
        (8.25279, 9.09703, 0.99993),
        (9.04552, 9.63928, -7.5e-05),
        (9.93019, 10.0132, 0.99992),
]


points = [
        (0, 0, 0),
        (0.442318, 0.187008, 0.999995),
        (0.7872, 0.542107, 0.49999),
        (1.16581, 0.860999, 0.999985),
        (1.5107, 1.21609, 0.49998),
        (1.88931, 1.53498, 0.999975),
        (2.2342, 1.89008, 0.49997),
        (2.61282, 2.20896, 0.999965),
        (2.95771, 2.56405, 0.49996),
        (3.33633, 2.88293, 0.999955),
        (3.68123, 3.23801, 0.49995),
        (4.05985, 3.55689, 0.999945),
        (4.40475, 3.91197, 0.49994),
        (4.78338, 4.23085, 0.999935),
        (5.12828, 4.58593, 0.49993),
        (5.50691, 4.9048, 0.999925),
        (5.85182, 5.25987, 0.49992),
        (6.23046, 5.57874, 0.999915),
        (6.50064, 5.99945, 0.99991),
        (6.84556, 6.35452, 0.499905),
        (7.14411, 6.73066, 1.4999),
        (7.36198, 7.15862, 0.499895),
        (7.74062, 7.47748, 0.99989),
        (8.08554, 7.83254, 0.499885),
        (8.46418, 8.15139, 0.99988),
        (8.73439, 8.57209, 0.999875),
        (9.07931, 8.92715, 0.49987),
        (9.37787, 9.30329, 1.49986),
        (9.59576, 9.73124, 0.49986),
        (9.81517, 9.85106, 0.499855),
        (10.0045, 10.0105, 0.99985),
]


"""
        auto esp_ = 1e-5;
        auto vmax = 1.0;
        auto wmax = 2.0;
        auto deltaV = vmax/2.0;
        auto deltaW = wmax/2.0;
        auto dt = 0.5;
        auto collSampleTime = 0.1;
        

              astar_->getExtendCostFun_ = [this](const utils::SE2Type& cur, const utils::SE2Type& ext){
        static int count = 0;
        if(count++ == 0){
          std::cout << "FUN CALL: getExtendCostFun_()" << std::endl;
        }
        auto diff = cur(2) - ext(2);
        utils::normAngle(diff);
        return (cur - ext).topRows(2).norm() + abs(diff) * 0.05;  
      };
      astar_->getHeuristicCostFun_ = [this](const utils::SE2Type& ext, const utils::SE2Type& goal){
        static int count1 = 0;
        if(count1++ == 0){
          std::cout << "FUN CALL: getHeuristicCostFun_()" << std::endl;
        }
        auto diff = ext(2) - goal(2);
        utils::normAngle(diff);
        return (ext - goal).topRows(2).norm() * 1.05 + abs(diff) * 0.0;
      };

"""
points = [
        (0, 0, 0),
        (0, 0, 0.499995),
        (0.438793, 0.23971, 0.49999),
        (0.877587, 0.479417, 0.499985),
        (1.2562, 0.798308, 0.99998),
        (1.52636, 1.21904, 0.999975),
        (1.79652, 1.63977, 0.99997),
        (2.06669, 2.06049, 0.999965),
        (2.33685, 2.48122, 0.99996),
        (2.60702, 2.90194, 0.999955),
        (2.87719, 3.32266, 0.99995),
        (3.14737, 3.74339, 0.999945),
        (3.41754, 4.16411, 0.99994),
        (3.68772, 4.58483, 0.999935),
        (3.82281, 4.79518, 0.99993),
        (4.16771, 5.15026, 0.499925),
        (4.60652, 5.38994, 0.49992),
        (5.04534, 5.62962, 0.499915),
        (5.48415, 5.86929, 0.49991),
        (5.92296, 6.10896, 0.499905),
        (6.36178, 6.34863, 0.4999),
        (6.58118, 6.46847, 0.499895),
        (6.95983, 6.78732, 0.99989),
        (7.23002, 7.20803, 0.999885),
        (7.50022, 7.62873, 0.99988),
        (7.77043, 8.04944, 0.999875),
        (8.11535, 8.40449, 0.49987),
        (8.55417, 8.64415, 0.499865),
        (8.77359, 8.76397, 0.49986),
        (9.15224, 9.08282, 0.999855),
        (9.42245, 9.50351, 0.99985),
        (9.76739, 9.85856, 0.499845),
        (9.9868, 9.97838, 0.49984),
]



points = [
        (0, 0, 0),
        (0, 0, 0.499995),
        (0.219396, 0.119855, 0.49999),
        (0.438794, 0.239709, 0.499985),
        (0.658191, 0.359561, 0.49998),
        (0.87759, 0.479413, 0.499975),
        (1.0669, 0.638856, 0.99997),
        (1.20198, 0.84922, 0.999965),
        (1.33706, 1.05958, 0.99996),
        (1.47215, 1.26994, 0.999955),
        (1.60723, 1.48031, 0.99995),
        (1.74232, 1.69067, 0.999945),
        (1.87741, 1.90103, 0.99994),
        (2.0125, 2.11139, 0.999935),
        (2.14759, 2.32174, 0.99993),
        (2.28268, 2.5321, 0.999925),
        (2.41777, 2.74246, 0.99992),
        (2.55286, 2.95282, 0.999915),
        (2.68795, 3.16317, 0.99991),
        (2.82305, 3.37353, 0.999905),
        (2.95815, 3.58388, 0.9999),
        (3.09324, 3.79424, 0.999895),
        (3.22834, 4.00459, 0.99989),
        (3.36344, 4.21494, 0.999885),
        (3.49854, 4.42529, 0.99988),
        (3.63364, 4.63565, 0.999875),
        (3.76874, 4.846, 0.99987),
        (3.94121, 5.02352, 0.499865),
        (4.16062, 5.14335, 0.49986),
        (4.38003, 5.26318, 0.499855),
        (4.59944, 5.383, 0.49985),
        (4.81886, 5.50282, 0.499845),
        (5.03827, 5.62264, 0.49984),
        (5.25769, 5.74247, 0.499835),
        (5.4771, 5.86229, 0.49983),
        (5.69652, 5.9821, 0.499825),
        (5.91594, 6.10192, 0.49982),
        (6.13535, 6.22174, 0.499815),
        (6.35477, 6.34155, 0.49981),
        (6.57419, 6.46137, 0.499805),
        (6.76353, 6.62078, 0.9998),
        (6.89864, 6.83112, 0.999795),
        (7.03376, 7.04146, 0.99979),
        (7.16888, 7.2518, 0.999785),
        (7.30401, 7.46214, 0.99978),
        (7.43913, 7.67247, 0.999775),
        (7.57425, 7.88281, 0.99977),
        (7.70938, 8.09315, 0.999765),
        (7.88186, 8.27066, 0.49976),
        (8.10128, 8.39046, 0.499755),
        (8.32071, 8.51026, 0.49975),
        (8.54013, 8.63006, 0.499745),
        (8.75956, 8.74986, 0.49974),
        (8.97899, 8.86966, 0.499735),
        (9.16833, 9.02906, 0.99973),
        (9.30347, 9.23939, 0.999725),
        (9.4386, 9.44972, 0.99972),
        (9.57373, 9.66005, 0.999715),
        (9.74622, 9.83755, 0.49971),
        (9.96566, 9.95735, 0.499705),
]

points = [
        (0, 0, 0),
        (0, 0, 0.499995),
        (0.219396, 0.119855, 0.49999),
        (0.438794, 0.239709, 0.499985),
        (0.658191, 0.359561, 0.49998),
        (0.87759, 0.479413, 0.499975),
        (1.0669, 0.638856, 0.99997),
        (1.20198, 0.84922, 0.999965),
        (1.33706, 1.05958, 0.99996),
        (1.47215, 1.26994, 0.999955),
        (1.60723, 1.48031, 0.99995),
        (1.74232, 1.69067, 0.999945),
        (1.87741, 1.90103, 0.99994),
        (2.0125, 2.11139, 0.999935),
        (2.14759, 2.32174, 0.99993),
        (2.28268, 2.5321, 0.999925),
        (2.41777, 2.74246, 0.99992),
        (2.55286, 2.95282, 0.999915),
        (2.68795, 3.16317, 0.99991),
        (2.82305, 3.37353, 0.999905),
        (2.95815, 3.58388, 0.9999),
        (3.09324, 3.79424, 0.999895),
        (3.22834, 4.00459, 0.99989),
        (3.36344, 4.21494, 0.999885),
        (3.49854, 4.42529, 0.99988),
        (3.63364, 4.63565, 0.999875),
        (3.76874, 4.846, 0.99987),
        (3.94121, 5.02352, 0.499865),
        (4.16062, 5.14335, 0.49986),
        (4.38003, 5.26318, 0.499855),
        (4.59944, 5.383, 0.49985),
        (4.81886, 5.50282, 0.499845),
        (5.03827, 5.62264, 0.49984),
        (5.25769, 5.74247, 0.499835),
        (5.4771, 5.86229, 0.49983),
        (5.69652, 5.9821, 0.499825),
        (5.91594, 6.10192, 0.49982),
        (6.13535, 6.22174, 0.499815),
        (6.35477, 6.34155, 0.49981),
        (6.57419, 6.46137, 0.499805),
        (6.76353, 6.62078, 0.9998),
        (6.89864, 6.83112, 0.999795),
        (7.03376, 7.04146, 0.99979),
        (7.16888, 7.2518, 0.999785),
        (7.30401, 7.46214, 0.99978),
        (7.43913, 7.67247, 0.999775),
        (7.57425, 7.88281, 0.99977),
        (7.70938, 8.09315, 0.999765),
        (7.88186, 8.27066, 0.49976),
        (8.10128, 8.39046, 0.499755),
        (8.32071, 8.51026, 0.49975),
        (8.54013, 8.63006, 0.499745),
        (8.75956, 8.74986, 0.49974),
        (8.97899, 8.86966, 0.499735),
        (9.16833, 9.02906, 0.99973),
        (9.30347, 9.23939, 0.999725),
        (9.4386, 9.44972, 0.99972),
        (9.57373, 9.66005, 0.999715),
        (9.74622, 9.83755, 0.49971),
        (9.96566, 9.95735, 0.499705),
]

"""
vtemp:
0 0.25 0.5 
wtemp:
-4.00001 -2.00001 -1e-05 1.99999 3.99999 
FUN CALL: getExtendCostFun_()
AT_GOAL
[INFO] [1740235319.171279019] [utils_node]: AStar Time cost: 5674.060757 ms
path.size():67
"""

points = [
        (0, 0, 0),
        (0, 0, 0.999995),
        (0.135077, 0.210367, 0.99999),
        (0.270155, 0.420733, 0.999985),
        (0.405234, 0.631098, 0.99998),
        (0.540315, 0.841463, 0.999975),
        (0.675396, 1.05183, 0.99997),
        (0.810478, 1.26219, 0.999965),
        (0.945561, 1.47255, 0.99996),
        (1.08065, 1.68292, 0.999955),
        (1.21573, 1.89328, 0.99995),
        (1.35082, 2.10364, 0.999945),
        (1.48591, 2.314, 0.99994),
        (1.62099, 2.52436, 0.999935),
        (1.75608, 2.73472, 0.99993),
        (1.89117, 2.94507, 0.999925),
        (2.02627, 3.15543, 0.99992),
        (2.16136, 3.36579, 0.999915),
        (2.29645, 3.57614, 0.99991),
        (2.364, 3.68132, 0.999905),
        (2.364, 3.68132, 1.9999),
        (2.364, 3.68132, 2.9999),
        (2.364, 3.68132, -2.2833),
        (2.364, 3.68132, -1.2833),
        (2.364, 3.68132, -0.283305),
        (2.364, 3.68132, 0.71669),
        (2.5525, 3.84554, 0.716685),
        (2.74099, 4.00977, 0.71668),
        (2.92949, 4.17399, 0.716675),
        (3.11799, 4.33821, 0.71667),
        (3.30649, 4.50243, 0.716665),
        (3.49499, 4.66664, 0.71666),
        (3.68349, 4.83086, 0.716655),
        (3.87199, 4.99508, 0.71665),
        (4.0605, 5.15929, 0.716645),
        (4.249, 5.32351, 0.71664),
        (4.43751, 5.48772, 0.716635),
        (4.62601, 5.65193, 0.71663),
        (4.81452, 5.81614, 0.716625),
        (5.00302, 5.98035, 0.71662),
        (5.19153, 6.14456, 0.716615),
        (5.38004, 6.30877, 0.71661),
        (5.56855, 6.47298, 0.716605),
        (5.75706, 6.63719, 0.7166),
        (5.94557, 6.80139, 0.716595),
        (6.13408, 6.9656, 0.71659),
        (6.3226, 7.1298, 0.716585),
        (6.51111, 7.294, 0.71658),
        (6.69963, 7.45821, 0.716575),
        (6.88814, 7.62241, 0.71657),
        (7.07666, 7.78661, 0.716565),
        (7.26517, 7.95081, 0.71656),
        (7.45369, 8.115, 0.716555),
        (7.64221, 8.2792, 0.71655),
        (7.83073, 8.4434, 0.716545),
        (8.01925, 8.60759, 0.71654),
        (8.20777, 8.77179, 0.716535),
        (8.39629, 8.93598, 0.71653),
        (8.58482, 9.10017, 0.716525),
        (8.77334, 9.26436, 0.71652),
        (8.96186, 9.42856, 0.716515),
        (9.15039, 9.59275, 0.71651),
        (9.24465, 9.67484, 0.716505),
        (9.43318, 9.83903, 0.7165),
        (9.62171, 10.0032, 0.716495),
        (9.7358, 10.0406, -0.28351),
        (9.97582, 9.97065, -0.283515),
]

# 提取 x, y 和 yaw
x = [p[0] for p in points]
y = [p[1] for p in points]
yaw = [p[2] for p in points]

# 可视化
plt.figure(figsize=(10, 8))
plt.plot(x, y, 'o-', label="Trajectory", markersize=6)  # 绘制轨迹

# 添加方向箭头
for i in range(len(points)):
    dx = np.cos(yaw[i]) * 0.5  # 箭头长度
    dy = np.sin(yaw[i]) * 0.5  # 箭头长度
    # plt.arrow(x[i], y[i], dx, dy, head_width=0.2, head_length=0.4, fc='r', ec='r')

plt.title("Points with Direction Arrows")
plt.xlabel("X Position")
plt.ylabel("Y Position")
plt.legend()
plt.grid(True)
plt.axis('equal')  # 保持比例
plt.show()